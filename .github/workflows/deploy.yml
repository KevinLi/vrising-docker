name: Deploy to ECR

on:
  push:
    branches:
      - main
    paths:
      - Dockerfile
  workflow_dispatch:
  repository_dispatch:
    types: [new-version]

env:
  APP_ID: 1829350

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Login to Amazon ECR
      id: login-ecr
      uses: docker/login-action@v2
      with:
        registry: public.ecr.aws
        username: ${{ secrets.AWS_ACCESS_KEY_ID }}
        password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    - name: Get Latest Build ID
      id: buildid
      run: |
        echo '::set-output name=buildid::'$(curl -X GET "https://api.steamcmd.net/v1/info/${{ env.APP_ID }}" | jq -r --arg APP_ID "${{ env.APP_ID }}" '.data[$APP_ID].depots.branches.public.buildid')
    - name: Build, tag, and push image to Amazon ECR
      if: github.ref == 'ref/heads/main' && github.event_name == 'repository_dispatch'
      env:
        ECR_REGISTRY: public.ecr.aws/r0w6f3t3
        ECR_REPOSITORY: vrising
        IMAGE_TAG: ${{ steps.buildid.outputs.buildid }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:build-$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
    - name: Build, tag, and push image to Amazon ECR (other)
      if: github.ref != 'ref/heads/main' && github.event_name != 'repository_dispatch'
      env:
        ECR_REGISTRY: public.ecr.aws/r0w6f3t3
        ECR_REPOSITORY: vrising
        IMAGE_TAG: ${{ github.ref_name }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:commit-$IMAGE_TAG .
        docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY